asyncapi: 2.2.0
info:
  title: Playground AsyncAPI specifications
  version: 0.1.0
  description: Playground microservices contract specifications
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
defaultContentType: application/json
channels:
  authors/outbound/requests:
    bindings:
      amqp:
        $ref: '#/components/channelBindings/OutboundChannelBindings'
    publish:
      summary: 'Use this exchange to publish requests to other services'
      bindings:
        amqp:
          $ref: '#/components/operationBindings/OutboundOperationBindings'
      message:
        bindings:
          amqp:
            $ref: '#/components/messageBindings/DefaultMessageBindings'
        headers:
          $ref: '#/components/schemas/AnyMessageHeaders'
        payload:
          $ref: '#/components/schemas/AnyRequestPayload'
  authors/inbound/requests:
    bindings:
      amqp:
        $ref: '#/components/channelBindings/InboundChannelBindings'
    subscribe:
      summary: 'Listen this queue to receive requests from other services'
      bindings:
        amqp:
          $ref: '#/components/operationBindings/InboundOperationBindings'
      message:
        bindings:
          amqp:
            $ref: '#/components/messageBindings/DefaultMessageBindings'
        headers:
          $ref: '#/components/schemas/AnyMessageHeaders'
        payload:
          $ref: '#/components/schemas/AnyRequestPayload'
  authors/outbound/responses:
    bindings:
      amqp:
        $ref: '#/components/channelBindings/OutboundChannelBindings'
    publish:
      summary: 'Use this exchange to send correlated response to other services'
      bindings:
        amqp:
          $ref: '#/components/operationBindings/OutboundOperationBindings'
      message:
        bindings:
          amqp:
            $ref: '#/components/messageBindings/DefaultMessageBindings'
        headers:
          $ref: '#/components/schemas/AnyMessageHeaders'
        payload:
          $ref: '#/components/schemas/AnyResponsePayload'
  authors/inbound/responses:
    bindings:
      amqp:
        $ref: '#/components/channelBindings/InboundChannelBindings'
    subscribe:
      summary: 'Listen this queue to receive correlated response from other services'
      bindings:
        amqp:
          $ref: '#/components/operationBindings/InboundOperationBindings'
      message:
        bindings:
          amqp:
            $ref: '#/components/messageBindings/DefaultMessageBindings'
        headers:
          $ref: '#/components/schemas/AnyMessageHeaders'
        payload:
          $ref: '#/components/schemas/AnyResponsePayload'
  authors/outbound/events:
    bindings:
      amqp:
        $ref: '#/components/channelBindings/OutboundChannelBindings'
    publish:
      summary: 'Use this exchange to publish events to other services'
      bindings:
        amqp:
          $ref: '#/components/operationBindings/OutboundOperationBindings'
      message:
        bindings:
          amqp:
            $ref: '#/components/messageBindings/DefaultMessageBindings'
        headers:
          $ref: '#/components/schemas/AnyMessageHeaders'
        payload:
          $ref: '#/components/schemas/AnyEventPayload'
  authors/inbound/events:
    bindings:
      amqp:
        $ref: '#/components/channelBindings/InboundChannelBindings'
    subscribe:
      summary: 'Listen this queue to receive events from other services'
      bindings:
        amqp:
          $ref: '#/components/operationBindings/InboundOperationBindings'
      message:
        bindings:
          amqp:
            $ref: '#/components/messageBindings/DefaultMessageBindings'
        headers:
          $ref: '#/components/schemas/AnyMessageHeaders'
        payload:
          $ref: '#/components/schemas/AnyEventPayload'
  posts/outbound/requests:
    bindings:
      amqp:
        $ref: '#/components/channelBindings/OutboundChannelBindings'
    publish:
      summary: 'Use this exchange to publish requests to other services'
      bindings:
        amqp:
          $ref: '#/components/operationBindings/OutboundOperationBindings'
      message:
        bindings:
          amqp:
            $ref: '#/components/messageBindings/DefaultMessageBindings'
        headers:
          $ref: '#/components/schemas/AnyMessageHeaders'
        payload:
          $ref: '#/components/schemas/AnyRequestPayload'
  posts/inbound/requests:
    bindings:
      amqp:
        $ref: '#/components/channelBindings/InboundChannelBindings'
    subscribe:
      summary: 'Listen this queue to receive requests from other services'
      bindings:
        amqp:
          $ref: '#/components/operationBindings/InboundOperationBindings'
      message:
        bindings:
          amqp:
            $ref: '#/components/messageBindings/DefaultMessageBindings'
        headers:
          $ref: '#/components/schemas/AnyMessageHeaders'
        payload:
          $ref: '#/components/schemas/AnyRequestPayload'
  posts/outbound/responses:
    bindings:
      amqp:
        $ref: '#/components/channelBindings/OutboundChannelBindings'
    publish:
      summary: 'Use this exchange to send correlated response to other services'
      bindings:
        amqp:
          $ref: '#/components/operationBindings/OutboundOperationBindings'
      message:
        bindings:
          amqp:
            $ref: '#/components/messageBindings/DefaultMessageBindings'
        headers:
          $ref: '#/components/schemas/AnyMessageHeaders'
        payload:
          $ref: '#/components/schemas/AnyResponsePayload'
  posts/inbound/responses:
    bindings:
      amqp:
        $ref: '#/components/channelBindings/InboundChannelBindings'
    subscribe:
      summary: 'Listen this queue to receive correlated response from other services'
      bindings:
        amqp:
          $ref: '#/components/operationBindings/InboundOperationBindings'
      message:
        bindings:
          amqp:
            $ref: '#/components/messageBindings/DefaultMessageBindings'
        headers:
          $ref: '#/components/schemas/AnyMessageHeaders'
        payload:
          $ref: '#/components/schemas/AnyResponsePayload'
  posts/outbound/events:
    bindings:
      amqp:
        $ref: '#/components/channelBindings/OutboundChannelBindings'
    publish:
      summary: 'Use this exchange to publish events to other services'
      bindings:
        amqp:
          $ref: '#/components/operationBindings/OutboundOperationBindings'
      message:
        bindings:
          amqp:
            $ref: '#/components/messageBindings/DefaultMessageBindings'
        headers:
          $ref: '#/components/schemas/AnyMessageHeaders'
        payload:
          $ref: '#/components/schemas/AnyEventPayload'
  posts/inbound/events:
    bindings:
      amqp:
        $ref: '#/components/channelBindings/InboundChannelBindings'
    subscribe:
      summary: 'Listen this queue to receive events from other services'
      bindings:
        amqp:
          $ref: '#/components/operationBindings/InboundOperationBindings'
      message:
        bindings:
          amqp:
            $ref: '#/components/messageBindings/DefaultMessageBindings'
        headers:
          $ref: '#/components/schemas/AnyMessageHeaders'
        payload:
          $ref: '#/components/schemas/AnyEventPayload'
components:
  channelBindings:
    InboundChannelBindings:
      $ref: '#/components/schemas/AMQPQueueChannelBindings'
    OutboundChannelBindings:
      $ref: '#/components/schemas/AMQPExchangeChannelBindings'
  operationBindings:
    InboundOperationBindings:
      $ref: '#/components/schemas/AMQPInboundOperationBindings'
    OutboundOperationBindings:
      $ref: '#/components/schemas/AMQPOutboundOperationBindings'
  messageBindings:
    DefaultMessageBindings:
      $ref: '#/components/schemas/AMQPMessageBindings'
  securitySchemes:
    user_pass:
      type: userPassword
  schemas:
    AMQPExchangeChannelBindings:
      additionalProperties: false
      type: object
      properties:
        is:
          const: routingKey
        exchange:
          additionalProperties: false
          type: object
          properties:
            name:
              type: string
              maxLength: 255
            type:
              type: string
            durable:
              type: boolean
            autoDelete:
              type: boolean
            vhost:
              type: string
          required:
            - name
            - type
            - durable
            - autoDelete
            - vhost
        bindingVersion:
          type: string
          enum:
            - '0.2.0'
            - 'latest'
      required:
        - is
        - exchange
    AMQPQueueChannelBindings:
      additionalProperties: false
      type: object
      properties:
        is:
          const: queue
        queue:
          additionalProperties: false
          type: object
          properties:
            name:
              type: string
              maxLength: 255
            durable:
              type: boolean
            exclusive:
              type: boolean
            autoDelete:
              type: boolean
            vhost:
              type: string
          required:
            - name
            - durable
            - exclusive
            - autoDelete
            - vhost
        bindingVersion:
          type: string
          enum:
            - '0.2.0'
            - 'latest'
      required:
        - is
        - queue
    AMQPCommonsOperationBindings:
      additionalProperties: false
      type: object
      properties:
        expiration:
          type: integer
          minimum: 0
          maximum: 86400
        userId:
          type: string
          minimum: 5
          maximum: 64
        cc:
          type: array
          items:
            type: string
        priority:
          type: integer
          minimum: 0
          maximum: 10
        deliveryMode:
          type: integer
        replyTo:
          type: string
          minimum: 5
          maximum: 255
        timestamp:
          type: boolean
        bindingVersion:
          type: string
          enum:
            - '0.2.0'
            - 'latest'
    AMQPOutboundOperationBindings:
      allOf:
        - $ref: '#/components/schemas/AMQPCommonsOperationBindings'
          required:
            - cc
            - priority
            - deliveryMode
        - additionalProperties: false
          type: object
          properties:
            mandatory:
              type: boolean
          required:
            - mandatory
    AMQPInboundOperationBindings:
      allOf:
        - $ref: '#/components/schemas/AMQPCommonsOperationBindings'
        - additionalProperties: false
          type: object
          properties:
            ack:
              type: boolean
          required:
            - ack
    AMQPMessageBindings:
      additionalProperties: false
      type: object
      properties:
        contentEncoding:
          type: string
        messageType:
          type: string
          minimum: 5
          maximum: 128
        bindingVersion:
          type: string
          enum:
            - '0.2.0'
            - 'latest'
      required:
        - contentEncoding
        - messageType
    AnyMessageHeaders:
      additionalProperties: true
      type: object
      properties:
        version:
          type: string
          example: '1.0.0'
        dateTime:
          type: string
          example: '2021-12-13T15:30:21.500+00:00'
        jobId:
          type: string
          format: uuid
          example: '72e66a12-67ca-470a-8c52-792193143811'
      required:
        - version
        - dateTime
        - jobId
    AnyRequestPayload:
      additionalProperties: true
      type: object
    AnyResponsePayload:
      additionalProperties: true
      type: object
    AnyEventPayload:
      additionalProperties: true
      type: object
